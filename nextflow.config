// Nextflow configuration file for GHFC WGS Alignment Pipeline

params {
    // Pipeline steps control
    steps = ['alignment']  // Available steps: alignment, deepvariant
    skip_alignment = false
    skip_deepvariant = false
    
    // Input/Output paths
    data = ""
    scratch = ""
    
    // Reference genomes
    ref = ""
    ref_name = ""
    oldref = ""
    
    // File patterns
    fastq_pattern = ""
    cram4realignment_pattern = "*.cram"
    
    // Tool paths (can be overridden when using containers)
    bwa_mem2 = "bwa-mem2"
    samblaster = "samblaster"
    sambamba = "sambamba"
    samtools = "samtools"
    bazam = "/path/to/bazam.jar"
    
    // GLnexus configuration
    glnexus_config = "DeepVariant_unfiltered"
    
    // Container settings
    enable_conda = false
    singularity_pull_docker_container = false
    apptainer_cache = ""
    singularity_cache = ""
    
    // Resource defaults
    max_memory = '460.GB'
    max_cpus = 95
    max_time = '240.h'
}

// Process-specific configurations
process {
    // Default resources
    cpus = 1
    memory = '4.GB'
    time = '240.h'
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries = 3

    container = 'docker://fcliquet/bioinfo-swissknife:latest'
    
    // Process-specific settings
    withName: 'BWA_MEM2_ALIGN' {
        cpus = 95
        memory = '460.GB'
    }

    withName: 'BAZAM_BWA_MEM2_REALIGN' {
        cpus = 47
        memory = '230.GB'
    }
    
    withName: 'MERGE_UNITS' {
        cpus = 1
        memory = '10.GB'
        container = 'docker://biocontainers/samtools:1.19.2--h50ea8bc_1'
    }
    
    withName: 'INDEX_CRAM' {
        cpus = 1
        memory = '5.GB'
        container = 'docker://biocontainers/samtools:1.19.2--h50ea8bc_1'
    }
    
    // DeepVariant process settings
    withName: 'DV_MAKE_EXAMPLES' {
        cpus = 95
        memory = '460.GB'
        container = 'docker://google/deepvariant:1.9.0'
    }
    
    withName: 'DV_CALL_VARIANTS' {
        cpus = 95
        memory = '460.GB'
        container = 'docker://google/deepvariant:1.9.0'
    }
    
    withName: 'DV_POSTPROCESS_VARIANTS' {
        cpus = 95
        memory = '460.GB'
        container = 'docker://google/deepvariant:1.9.0'
    }

    withName: 'GLNEXUS_FAMILY' {
        container = 'docker://cgrlab/glnexus:v1.4.1'
        cpus = { Math.min(4, params.max_cpus) }
        memory = { 50.GB * task.attempt }
    }
}

// Executor configurations
executor {
    name = 'slurm'
    queueSize = 50
    submitRateLimit = '10 sec'
    pollInterval = '30 sec'
}

// Container configurations
apptainer {
    autoMounts = true
    cacheDir = params.apptainer_cache ?: '/path/to/apptainer/cache'
    runOptions = '--bind /pasteur'
}

singularity {
    autoMounts = true
    cacheDir = params.singularity_cache ?: '/path/to/singularity/cache'
    runOptions = '--bind /pasteur'
}

docker {
    docker.runOptions = '-u $(id -u):$(id -g)'
}

// Environment profiles
profiles {
    
    // Local execution (for testing)
    local {
        process.executor = 'local'
        process.cpus = 4
        process.memory = '8.GB'
    }

    //SLURM execution
    slurm {
        process.executor = 'slurm'
        process.clusterOptions = '-p ghfc --qos=ghfc'
    }

    // Apptainer
    apptainer {
        apptainer.enabled = true
        singularity.enabled = false
        docker.enabled = false
    }
    
    // Testing profile
    test {
        params {
            data = 'test_data/'
            scratch = 'test_scratch/'
            max_memory = '6.GB'
            max_cpus = 2
            max_time = '1.h'
        }
        
        process {
            cpus = { check_max( 1, 'cpus' ) }
            memory = { check_max( 2.GB * task.attempt, 'memory' ) }
            time = { check_max( 30.min * task.attempt, 'time' ) }
        }
    }
}

// Resource checking function
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Manifest
manifest {
    name = 'ghfc-ngs'
    author = 'GHFC Team'
    homePage = 'https://github.com/bourgeron-lab/ghfc-ngs'
    description = 'WGS pipeline for GHFC project'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.10.3'
    version = '1.0.0'
}

// Timeline and reports
timeline {
    enabled = true
    overwrite = true
    file = "reports/timeline.html"
}

report {
    enabled = true
    overwrite = true
    file = "reports/report.html"
}

trace {
    enabled = true
    overwrite = true
    file = "reports/trace.txt"
}

dag {
    enabled = true
    overwrite = true
    file = "reports/dag.svg"
}
